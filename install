#!/usr/bin/env bash
# =============================================================================
#
# Centova Cast - Copyright 2010-2020, Centova Technologies Inc.
# Master installation script
#
# =============================================================================
HOMEPATH=/usr/local/centovacast

FILENAME=cc-bootstrap-latest.tar.gz
DATADIR=cc-bootstrap
BRANCH=stable
UPDATEURL=http://install.centova.com
### This will be overriden by the docker environment.
LICENSE_KEY=@@LICENSE_KEY@@

COLOR=1
[ -t 1 ] || COLOR=0 # disable COLOR if stdout is not a terminal

# Generates the help text. Advanced help text is prefixed with '@ '.
function helptext {
		ccat <<EOF
@ To {bold}download and prepare{off} the latest version of this installation script:{code}
@ 	wget -O install.sh install.centova.com/LICENSEKEY
@ 	chmod 0755 install.sh
@ {off}
@ 	Replace {bold}LICENSEKEY{off} with your actual Centova Cast license key.
@ 
To perform a {bold}standard Centova Cast installation{off}:{code}
	./install.sh [options]{off}

To {bold}install a cluster host{off} (to be controlled by an existing web interface on
another server):{code}
	./install.sh control <webip> <adminpass> [options]{off}

	{bold}webip{off} specifies the IP address of the web interface server, and {bold}adminpass{off}
	specifies the admin password for the web interface server.

@ To {bold}perform a bare installation{off} (advanced users only) run:{code}
@ 	./install.sh bare [options]{off}
@ 
{bold}Available options:{off}
  --help               show this help screen, with the most common options
  --help-all           show more detailed help, with all available options
@   --no-color           disable colored output
@   --channel={gray}NAME{off}       select channel to install (stable or unstable, default=$BRANCH)
@   --vhosts={gray}PATH{off}        specify a custom path for all client data
@   --force              overwrite any existing Centova Cast installation
  --deps               invoke yum/apt to install any missing package dependencies
                         before installing Centova Cast
  --shoutcast2         include SHOUTcast DNAS v2 in installation
  --shoutcast1         include SHOUTcast DNAS v1 in installation
  --icecast            include IceCast in installation
  --liquidsoap         include Liquidsoap in installation
  --icescc             include ices-cc in installation
  --sctrans2           include sc_trans v2 in installation
  --shoutcast-all      shorthand for --deps --shoutcast2 --liquidsoap
  --icecast-all        shorthand for --deps --icecast --liquidsoap
@   --no-firewall        do not add firewall rules (CentOS 7+ only)
@   --bind={gray}ADDRESS{off}       use the specified IP address only (default: listen on all)
@   --fqdn={gray}HOSTNAME{off}      use the specified hostname for SSL certificate generation
@                          (default: self-signed cert on bare IP address)
@   --webports           use ports 80 and 443 for Centova Cast (default port: 2199);
@                          required (along with a third-party SSL certificate, or
@                          the --letsencrypt parameter) to serve the web site and
@                          your streams over SSL/TLS
@   --letsencrypt        use letsencrypt.org to provide SSL certificates (default: use
@                          self-signed certificates)
  --secure={gray}HOSTNAME{off}    use ports 80/443 and automatically obtain an SSL/TLS
                         certificate for HOSTNAME from letsencrypt.org
@                          (shorthand for --letsencrypt --webports --fqdn=HOSTNAME)"
@   --email={gray}ADDRESS{off}      use the specified email for letsencrypt.org registration
@                          (default: admin@HOSTNAME, using the --secure hostname)

{bold}Recommended options:{off}
  {hi}--icecast-all --shoutcast2 --secure=hostname.example.com --email=you@example.com{off}
  
  This installs {bold}IceCast{off}, {bold}SHOUTcast DNAS{off}, and {bold}Liquidsoap{off}, and configures Centova Cast
  at {bold}https://hostname.example.com{off} with SSL/TLS certificates provided and updated
  automatically by letsencrypt.org.
  
  Note that even on cluster host installations where no web interface is required,
  the {bold}--secure{off} parameter is recommended to allow Centova Cast to serve your audio
  streams over SSL/TLS.
EOF
}

function show_help {
	local all=0
	[ "$1" == "all" ] && all=1
	
	for f in /usr/local/bin/bash /usr/bin/bash /bin/bash; do
		[ -f $f ] && BASHPATH=$f
	done

	[ -z "$BASHPATH" ] && BASHPATH="/usr/bin/env bash"

	cecho "{line}===== {title}Centova Cast Installer {line}============================================={off}"
	echo ""
	
	if [ $all -gt 0 ]; then
		helptext | sed 's/^@ //g'
	else
		helptext | grep -v '^@ '
	fi

# not yet complete:
#  --homepath           specify an alternate installation root
#                         default: $HOMEPATH

	exit 1;	
}

function wget_print {
	while read line; do
		printf "%*.*s\r" -$COLS $COLS "${line//../}"

		case "$line" in
			*FAILED*) ERR=1
				;;
			*failed*) ERR=1
				;;
			*ERROR*) ERR=1
				;;
			*error*) ERR=1
				;;
			*) ERR=0
			;;
		esac
		[ $ERR -gt 0 ] && echo ""
	done

	return 0
}

function read_string {
	RSVARNAME="$1"
	RSDEFVALUE="$2"
	RSPROMPT="$3"
	RSARGS="-e "
	[ "$4" == "password" ] && RSARGS="$RSARGS -s"

	RSVNS="${RSVARNAME}_SET"
	if [ ! -z "${!RSVNS}" ]; then
		eval $RSVARNAME="${!RSVNS}"
		export $RSVARNAME
		return 0
	fi

	RSEMPTIES=0

	while [ true ]; do
		read -p "$RSPROMPT [$RSDEFVALUE]: " $RSARGS $RSVARNAME
		echo ""
		if [ -z "${!RSVARNAME}" ]; then
			if [ ! -z "$RSDEFVALUE" ]; then
				eval $RSVARNAME="$RSDEFVALUE"
				export $RSVARNAME
				return 0
			else
				RSEMPTIES=$((RSEMPTIES+1))
				[ $RSEMPTIES -gt 1 ] && echo "Aborted." && exit 1
				echo "You must enter a value.  If you want to abort this script, press ENTER one more time."
			fi
		else
			return 0
		fi
	done

}

function show_status {
	cecho "{hdg}$1{off}"
}

function error_exit {
	cecho "{err}Error:{off} $1"
	exit 1
}

function get_file {
	COLS=$((COLUMNS-2))
	[ $COLS -lt 0 ] && COLS=78
	WGARGS=""
	[ $# -eq 2 ] && WGARGS="$WGARGS -O $2"
	WGARGS="$WGARGS $1"

	set -o pipefail
	wget --progress=dot --no-check-certificate $WGARGS 2>&1 | tee /tmp/cc_download.$$ | wget_print
	RES=$?

	if [ $RES -gt 0 ]; then
		echo "  > Download error details:"
		grep -v '\.\.\.\.\.\.' /tmp/cc_download.$$ | sed 's/^/  > /g'
	fi
	rm -f /tmp/cc_download.$$

	return $RES
}

function detect_os_arch {
	OSARCH=$(uname -m)
	LINUX64=0
	LINUX32=0

	BITS=$(getconf LONG_BIT)
	if [ "$BITS" == "32" ]; then
		LINUX32=1
	elif [ "$BITS" == "64" ]; then
		LINUX64=1
	elif [ "$OSARCH" == "x86_64" ]; then
		LINUX64=1
	else
		LINUX32=1
	fi

	export OSARCH LINUX32 LINUX64
}

detect_systemd() {
	SYSTEMD=0
	stat -c %N /proc/1/exe | grep -q systemd
	[ $? -eq 0 ] && SYSTEMD=1

	export SYSTEMD
}

function binexists {
	command -v "$1" > /dev/null 2>&1
	return $?
}

function randpass {
	local PWLEN=12 GENPW="" CCOUNT=0 CASC CORD CHAR ALNUM=1
	while [ $PWLEN -gt 0 ]; do
		read -N 1 CASC < /dev/urandom
		LC_CTYPE=C printf -v CORD "%d" "'$CASC"

		# alphanumeric passwords only?
		if [ $ALNUM -eq 0 ]; then
			# nope -- 33 .. 126 inclusive is our valid character range, so 94 characters
			CORD=$((CORD % 94))
			CORD=$((CORD + 33))
		else
			# yup, 48 .. 57, 65 .. 90, 97 .. 122 inclusive is our character range, so 62 characters
			CORD=$((CORD % 62))
			CORD=$((CORD + 48))
			if [ $CORD -gt 57 ] && [ $CORD -lt 65 ]; then
				CORD=$((CORD + 10))
			fi
			if [ $CORD -gt 90 ] && [ $CORD -lt 97 ]; then
				CORD=$((CORD + 26))
			fi
		fi
		printf -v CASC "%03o" "$CORD"
		printf -v CHAR \\"$CASC"
		GENPW="${CHAR}${GENPW}"

		PWLEN=$((PWLEN-1))
	done

	export "$1"="$GENPW"
}

function automate_web_install {
	[ -z "$DBHOST" ] && DBHOST="localhost"
	[ -z "$DBNAME" ] && DBNAME="centovacast"
	[ -z "$DBUSER" ] && DBUSER="centovacast"
	[ -z "$DBPASS" ] && randpass DBPASS

	local GRANTHOST="localhost"
	[ "$DBHOST" != "localhost" ] && GRANTHOST="%"

	if [ ! -z "$DBROOT" ]; then
		binexists mysql || ( echo "mysql client not found in path; cannot create database automatically" && return 1 )

		echo "CREATE DATABASE '${DBNAME}'; GRANT ALL PRIVILEGES ON '${DBNAME}'.* TO '${DBUSER}'@'${GRANTHOST}' IDENTIFIED BY '${DBPASS}'" | mysql -uroot -p"${DBROOT}" -h"${DBHOST}"
		[ $? -gt 0 ] && ( echo "failed to create database and grant privileges, cannot complete web installation automatically" && return 1 )
	fi

	cecho "{hdg}Performing automated web install ...{off}"
	echo ""
	local tmpf=/tmp/cc_download.$$
	local insterror

	echo "Installing database and settings ..."
	wget -q -O $tmpf "http://$WEBIP:2199/install.php" --post-data="settings[email]=${ADMINEMAIL}&settings[password1]=${ADMINPASS}&settings[password2]=${ADMINPASS}&settings[dbname]=${DBNAME}&settings[dbuser]=${DBUSER}&settings[dbpass]=${DBPASS}&settings[dbhost]=${DBHOST}&step=settings&install=1"
	[ $? -gt 0 ] && cecho "{err}HTTP request failed, cannot complete web installation automatically{off}" && return 1
	grep -q 'Installation successful' $tmpf
	if [ $? -eq 0 ]; then
		echo "Complete"
	else
		insterror=$(grep -A10 '<div id="installerror">' $tmpf | tr -d '\r\n' | sed -r -e 's/^.*?<div id="installerror">//' -e 's~</div>.*$~~')
		if [ -z "$insterror" ]; then
			insterror=$(sed -r 's/<[^\>]+>//g' /tmp/cc_download.2307 | awk '/Fatal error:/ { gsub("^.*Fatal error:[ \t]*",""); gsub(" in /.*",""); print }')
			[ -z "$insterror" ] && insterror="an unknown error occurred during installation"
		fi
		
		echo ""
		cecho "{err}Automated web installation failed.{off}"
		cecho "Reason: {bold}$insterror{off}" 
		return 1
	fi

	return 0
}

function detect_web_ip {
	WEBIP=$( ip addr show up | awk '
$1 == "inet" && $2 ~ /^[0-9\.]+(\/[0-9]+)?$/ {
	sub("/.*$","",$2);
	if ($2 ~ /^127\./) next;
	if ($2 ~ /^(10|192\.168|172\.16)\./) {
		if (!ip) { ip = $2 };
		next
	};
	ip = $2;
	last;
}
END {
	if (!ip) { ip="127.0.0.1"; }
	print ip
}' 2>/dev/null )

	if [ -z "$WEBIP" ]; then
		WEBIP=$( ifconfig | awk '
$1 == "inet" {
	sub("^.*?:","",$2);
	if ($2 ~ /^127\./) next;
	if ($2 ~ /^(10|192\.168|172\.16)\./) {
		if (!ip) { ip = $2 };
		next
	};
	ip = $2;
	last;
}
END {
	if (!ip) { ip="127.0.0.1"; }
	print ip
}' 2>/dev/null )
	fi

	if [ -z "$WEBIP" ]; then
		WEBIP="127.0.0.1"
	fi
}

function join_by {
	local IFS="$1"
	shift
	echo "$*" 
}

function show_firewall_tip {
	local fwupdated=0
	local fw_cc_example=""
	local fw_sc_example=""
	local insttype="$1"
	local webip="$2"

	publicports=( 21 )
	[ $WEBPORTS -gt 0 ] && publicports+=( 80 443 ) 
	[ $insttype == "full" ] && publicports+=( 2199 )
	publicports+=( 2197 )
	pp="${publicports[@]}"
	pp="${pp// /,}"
	

	fw_example=()
	fw_stream_example=()
	
	command -v "firewall-cmd" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		if [ $UPDATEFIREWALL -gt 0 ]; then
			# note: the individual installers perform the actual firewall updates
			firewall-cmd --list-ports | grep -qE '(^| )219[789]/tcp'
			[ $? -eq 0 ] && fwupdated=1
		fi
		
		if [ $fwupdated -eq 0 ]; then
			fw_example+=( "firewall-cmd --permanent --add-port=${pp}/tcp" )
			fw_example+=( "firewall-cmd reload" )
		fi		
		fw_stream_example+=("firewall-cmd --permanent --add-port=8000-10000/tcp" "firewall-cmd reload")
	
	else
		command -v "iptables" >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			pp="${publicports[@]}"
			fw_example+=( "iptables -A INPUT -p tcp -m multiport --dports ${pp} -j ACCEPT" )
			fw_stream_example+=( "iptables -A INPUT -p tcp -m multiport --dports 8000-10000" )
			
		else
			command -v "nft" >/dev/null 2>&1
			if [ $? -eq 0 ]; then
				fw_example+=( "nft add rule filter input tcp dport { ${pp} } accept" )
				fw_stream_example+=( "nft add rule filter input tcp dport 8000-10000 accept" )
			fi
		fi
	fi

	if [ $fwupdated -gt 0 ]; then
# .......................................................................79 ->|
		ccat <<EOF
{hdg}Firewall Updated{off}

  {bold}Your firewall has been updated to allow access to Centova Cast.{off}

  Please note that you will also need to manually update your firewall to
  allow access to any ports that you intend to use for your streams.
EOF
	else
		ccat <<EOF
{hdg}Firewall Tips{off}

  {bold}Please note that if you are using a firewall, you will need to manually
  update your firewall rules to allow access to Centova Cast.{off}

  You will need to open the following TCP ports:
EOF

		pp="${publicports[@]}"
		cecho "   - {bold}${pp// /, }{off} (public access)"
		if [ "$insttype" != "full" ]; then
			cecho "   - {bold}2198{off} (access by {bold}$webip{off} only)"
		fi
		echo ""
		
		if [ ${#fw_example[@]} -gt 0 ]; then
			echo "  Depending on your OS distribution and configuration, this may be possible by"
			echo "  running commands such as:"
			for f in "${fw_example[@]}"; do
				cecho "    {code}$f{off}"
			done
			echo ""
		fi
		echo "  Additionally, you will need to allow access to any ports that you intend to"
		echo "  use for your streams (for example, the port range 8000-10000)."
	fi

	if [ ${#fw_stream_example[@]} -gt 0 ]; then
		echo ""
		echo "  To open TCP ports 8000-10000 for use by streams, you may be able to run"
		echo "  commands such as:"
		for f in "${fw_stream_example[@]}"; do
			cecho "    {code}$f{off}"
		done
	fi
	
	echo ""
}

get_port_process() {
	local port="$1"
	local addr="$2"
	if [ ! -z "$addr" ]; then
		if [ "$addr" == "0.0.0.0" ]; then
			addr=""
		else
			addr="and ( src $addr or src 0.0.0.0 )"
		fi
	fi
	
	ss -tlnp "( sport = :$port ) $addr" | awk '$6 ~ /^users:/ { sub("^users....","",$6); sub(".,.*$","",$6); print $6 }'
}

enable_web_ports() {
	local bindaddr="$1"
	local fqdn="$2"
	local letsencrypt="$3"
	local leemail="$4" 
	
	local webportsfailed=0
	
	echo ""
	show_status "Enabling web ports"
	echo ""
	
	$HOMEPATH/sbin/set_web_ports --fqdn="$fqdn" --bind="$bindaddr" --force --automated
	if [ $? -eq 0 ]; then
		$HOMEPATH/centovacast reload-web
		if [ $? -eq 0 ]; then
			echo ""
			show_status "Enabling stream proxy"
			echo ""

			$HOMEPATH/sbin/set_proxy --on --automated
			if [ $? -eq 0 ]; then
				$HOMEPATH/centovacast reload-web || failures+=( "{dkerr}-{off} Failed to restart Centova Cast after enabling the stream proxy." )
			else
				failures+=( "{dkerr}-{off} Failed to enable the stream proxy." )
			fi

			if [ $letsencrypt -gt 0 ]; then
				echo ""
				show_status "Obtaining SSL certificate from letsencrypt.org"
				echo ""
				
				$HOMEPATH/sbin/set_ssl_cert letsencrypt "$fqdn" "$leemail"
				[ $? -ne 0 ] && failures+=( "{dkerr}-{off} Failed to configure Let's Encrypt support.\n  To try again, run:\n    {code}$HOMEPATH/sbin/set_ssl_cert letsencrypt $fqdn $leemail{off}" )
			fi
			echo ""
			
		else
			failures+=( "{dkerr}-{off} Failed to restart Centova Cast after enabling web ports.\n  This may indicate a port conflict on your server." )
			webportsfailed=1
		fi
	else
		webportsfailed=1
		failures+=( "{dkerr}-{off} Failed to configure Centova Cast to listen on standard web ports.\n  To try again, run:\n    {code}$HOMEPATH/sbin/set_web_ports --fqdn=$fqdn --bind=$bindaddr{off}" )
	fi
	
	if [ $webportsfailed -gt 0 -a $letsencrypt -gt 0 ]; then
		failures+=( "{dkerr}-{off} Cannot configure Let's Encrypt support without web ports enabled.\n  After enabling web ports, to try again, run:\n    {code}$HOMEPATH/sbin/set_ssl_cert letsencrypt $fqdn $leemail{off}" )
	fi

}

# Reinstalls Centova Cast using its existing database settings, TLS/SSL
# certificates and ACME configuration, and source/server applications. Requires
# an existing, working installation of Centova Cast.
#
# Database and other relevant settings are saved in ccinrestall.conf before
# attempting reinstall and, if the reinstallation fails, the next attempt will
# used the cached settings.
#
# If IceCast, ices-cc, or Liquidsoap have previously been installed from source
# by Centova Cast on this server, they will be preserved prior to reinstalling
# to avoid needing to recompile them during reinstallation.
#
# This is of course a destructive operation and may fail in any number of ways,
# which is why it's not listed in --help and not intended for client use.
reinstall() {
	local here=$(dirname -- $(readlink -f -- "$0"))
	local dbname dbuser dbpass dbhost domain email accountfn apps adminpassword adminemail
	
	if [ ! -e "/etc/centovacast.conf" ]; then
		[ -e "$here/ccreinstall.conf" ] || error_exit "/etc/centovacast.conf does not exist; is Centova Cast installed?"
		. "$here/ccreinstall.conf"
	else
		. /etc/centovacast.conf
		[ ! -z "$HOMEPATH" ] || error_exit "/etc/centovacast.conf appears to be invalid"

		# pull in ccreinstall.conf to get the default adminpassword/etc, before updating with values from centovacast.conf
		[ -e "$here/ccreinstall.conf" ] && . "$here/ccreinstall.conf"

		dbname=$(awk -F '=' '/^DB_NAME=/ {print $2}' $HOMEPATH/etc/centovacast.conf)
		dbuser=$(awk -F '=' '/^DB_USER=/ {print $2}' $HOMEPATH/etc/centovacast.conf)
		dbpass=$(awk -F '=' '/^DB_PASS=/ {print $2}' $HOMEPATH/etc/centovacast.conf)
		dbhost=$(awk -F '=' '/^DB_HOST=/ {print $2}' $HOMEPATH/etc/centovacast.conf)
		domain=$(head -n 1 $HOMEPATH/etc/ssl/domains.txt 2>/dev/null)
		email=""
		if [ ! -z "$domain" ]; then
			local accountfn=$(find $HOMEPATH/etc/ssl/accounts -name account.json | grep "$domain")
			if [ ! -z "$accountfn" ]; then
				email=$(awk -F ':' '$1 = /email/ { gsub(",$","",$2); gsub("[\" ]","",$2); print $2 }' $accountfn)
			fi
		fi
		[ -z "$email" -a ! -z "$domain" ] && email="admin@${domain}"
		
	
		if [ -z "$dbname" -o -z "$dbuser" -o -z "$dbpass" -o -z "$dbhost" ]; then
			# restore values in ccreinstall.conf, if it exists
			[ -e "$here/ccreinstall.conf" ] && . "$here/ccreinstall.conf"
		fi
	fi
	
	if [ -z "$dbname" -o -z "$dbuser" -o -z "$dbpass" -o -z "$dbhost" ]; then
		error_exit "Database connection settings not found in $HOMEPATH/etc/centovacast.conf nor $here/ccreinstall.conf"
	fi
	
	[ -e $HOMEPATH/shoutcast2 ] && apps="--shoutcast2 $apps"
	[ -e $HOMEPATH/shoutcast ] && apps="--shoutcast $apps"
	
	local generatedpw=0
	if [ -z "$adminpassword" ]; then
		randpass ADMINPASS
		adminpassword="$ADMINPASS"
		generatedpw=1
	fi
	
	rm -f "$here/ccreinstall.conf"
	touch "$here/ccreinstall.conf"
	chmod 0600 "$here/ccreinstall.conf"
	cat <<EOF >> "$here/ccreinstall.conf"
# Generated by: $here/install.sh --reinstall
#
# This file saves a copy of the database settings from the existing Centova Cast
# installation prior to its removal. In the event that the reinstallation fails
# after /usr/local/centovacast is removed, the settings in this file will
# automatically be used by the reinstaller if you run --reinstall again.
#
# You can also modify this file to set an adminpassword and adminemail to be
# used during the next reinstallation.
#
# Be sure to preserve the user-only (0600) permissions on this file as it does
# contain your passwords.

dbname="${dbname}"
dbhost="${dbhost}"
dbuser="${dbuser}"
dbpass="${dbpass}"
domain="${domain}"
email="${email}"
apps="${apps}"
adminpassword="$adminpassword"
adminemail="$adminemail"
EOF
	
	local preservepath="${HOMEPATH/centovacast/ccpreserve}"
	[ "$preservepath" == "$HOMEPATH" ] && preservepath=/usr/local/ccpreserve
	
	if [ $REIPRESERVE -gt 0 ]; then
		cecho "{hdg}Preserving locally built applications and certificates{off}"
		echo ""
		
		mkdir -p $preservepath/ssl
		cp -a $HOMEPATH/etc/ssl/* $preservepath/ssl  
		echo "SSL configuration"

		if [ -e $HOMEPATH/liquidsoap -a ! -e $preservepath/liquidsoap ]; then
			echo "Liquidsoap"
			mv $HOMEPATH/liquidsoap $preservepath
		fi

		if [ -e $HOMEPATH/.opam -a ! -e $preservepath/.opam ]; then
			mv $HOMEPATH/.opam $preservepath
		fi
		
		if [ -e $HOMEPATH/ices -a ! -e $preservepath/ices ]; then
			echo "ices-cc"
			mv $HOMEPATH/ices $preservepath
		fi
	fi
	
	echo ""
	cecho "{hdg}Uninstalling Centova Cast{off}"
	echo ""
	echo 'UNINSTALL' | /usr/local/centovacast/sbin/uninstall --i-want-to-delete-all-my-data
	
	killall -9 sc_serv sc_trans icecast2 ices liquidsoap 2>/dev/null
	
	echo ""
	cecho "{hdg}Clearing database{off}"
	echo ""
		
	echo "drop database ${dbname}; create database ${dbname};" | mysql "-u${dbuser}" "-h${dbhost}" "${dbname}" "-p${dbpass}" || error_exit "Failed to remove and re-create database"
	rm -rf $HOMEPATH /etc/centovacast.conf
	
	mkdir -p $HOMEPATH/var/cache $HOMEPATH/etc/ssl
	if [ -d $preservepath/tarballs ]; then
		# install SHOUTcast2 from local packages instead of redownloading each time
		cp $preservepath/tarballs/* $HOMEPATH/var/cache/
	fi
	if [ -d $preservepath/ssl ]; then
		cp -a $preservepath/ssl/* $HOMEPATH/etc/ssl
	fi

	echo ""
	cecho "{hdg}Reinstalling{off}"
	echo ""
	
	local secure=""
	[ ! -z "$domain" ] && secure="--secure=${domain} --email={$email}"
	[ -z "$adminemail" ] && adminemail="$email"; [ -z "$adminemail" ] && adminemail="example@example.com"
	$here/install.sh "$@" $secure $apps "--admin-email=$email" "--admin-pass=$adminpassword" "--dbname=${dbname}" "--dbuser=$dbuser" "--dbpass=$dbpass" "--dbhost=$dbhost" --reinstalling || exit 1

	if [ $REIPRESERVE -gt 0 ]; then
		echo ""
		cecho "{hdg}Restoring preserved applications{off}"
		echo ""
	
		if [ -e $preservepath/liquidsoap ]; then
			cecho "{bold}Liquidsoap{off}"
			ln -s $preservepath/.opam $HOMEPATH/.opam
			ln -s $preservepath/liquidsoap $HOMEPATH/liquidsoap
			$HOMEPATH/sbin/enable_package LIQUIDSOAP $HOMEPATH/liquidsoap/bin/liquidsoap
			echo ""
		fi
		
		if [ -e $preservepath/ices ]; then
			cecho "{bold}ices-cc{off}"
			ln -s $preservepath/ices $HOMEPATH/ices
			$HOMEPATH/sbin/enable_package icescc $HOMEPATH/ices/bin/ices
			echo ""
		fi

		if [ -e /usr/local/icecast/bin/icecast ]; then
			cecho "{bold}IceCast{off}"
			$HOMEPATH/sbin/enable_package ICECAST /usr/local/icecast/bin/icecast
			echo ""
		fi
	fi
	
	echo ""
	cecho "{hdg}Complete{off}"
	echo ""
	echo "Reinstallation completed."
	if [ $generatedpw -gt 0 ]; then
		echo ""
		echo "Your new admin password for Centova Cast can be found in:"
		cecho "  {code}$here/ccreinstall.conf{off}"
		echo ""
	fi
	exit 0
}

function color {
	# ANY CHANGES TO COLOR CODE NEED TO BE DUPLICATED IN PACKAGE install (main install.sh) AND PACAKGE COMMON (lib/bashfunc) 

	local enabled="$1" 
	local mode=0
	if [ $enabled == "1" ]; then
		if [[ "$TERM" == *"256"* ]]; then
			mode=2
		else
			mode=1
		fi
	fi
	
	case $mode in
		0) colors=( [off]=""      [line]=""             [title]=""             [bold]=""             [warn]=""             [err]=""             [dkerr]=""             [hi]=""             [gray]=""             [opt]=""             [code]=""             [ok]=""             [dkok]=""            [hdg]=""             ) ;;
		1) colors=( [off]="\e[0m" [line]="\e[0;34m"     [title]="\e[1;34m"     [bold]="\e[1;37m"     [warn]="\e[1;33m"     [err]="\e[1;31m"     [dkerr]="\e[0;31m"     [hi]="\e[1;36m"     [gray]="\e[1;30m"     [opt]="\e[1;37m"     [code]=""             [ok]="\e[1;32m"     [dkok]="\e[0;32m"    [hdg]="\e[1;36m"     ) ;;
		2) colors=( [off]="\e[0m" [line]="\e[38;5;25m"  [title]="\e[38;5;255m" [bold]="\e[38;5;255m" [warn]="\e[38;5;166m" [err]="\e[38;5;196m" [dkerr]="\e[38;5;160m" [hi]="\e[38;5;123m" [gray]="\e[38;5;241m" [opt]="\e[38;5;147m" [code]="\e[38;5;147m" [ok]="\e[38;5;76m"  [dkok]="\e[38;5;70m" [hdg]="\e[38;5;123m" ) ;;
	esac
}

function cecho {
	local msg="$1"
	local c
	for k in "${!colors[@]}"; do
		c=${colors[$k]}
		msg="${msg//\{${k}\}/$c}"
		
	done
	echo -e "$msg"
}

function ccat {
	local prefix=""
	if [ "$1" == "-p" ]; then
		shift
		prefix="$1"
		shift
	fi
	while IFS= read line; do
		cecho "${prefix}${line}"
	done
}



declare -A colors=()
color "$COLOR"

INSTTYPE="$1"
[ -z "$INSTTYPE" ] && INSTTYPE="full"

if [ "$INSTTYPE" == "control" ]; then
	[ $# -lt 3 ] && show_help && exit 1

	shift
	WEBIP="$1"
	shift
	WEBPASS="$1"
	shift

	[ "${WEBIP:0:2}" == "--" ] && show_help && exit 1 
	[ "${WEBPASS:0:2}" == "--" ] && show_help && exit 1

	ARGS="--webip=$WEBIP --webpass=$WEBPASS --licensekey=$LICENSE_KEY --fqdn=$FQDN $*"
else
	if [ "${INSTTYPE:0:2}" == "--" ]; then
		INSTTYPE="full"
	else
		shift
	fi
	ARGS="$*"
fi

DEBUG=0
VHOSTPATH=""
FORCE=0
FORCEARCH=""
FORCEDIST=""
AUTODEPS=0
UPDATEFIREWALL=1
INSTALLDEPS=0
EXTRAPACKAGES=""
LETSENCRYPT=0
LEEMAIL=""
FQDN=""
WEBPORTS=0
BINDADDR="0.0.0.0"
REINSTALL=0
REIPRESERVE=1
while [ "$1" != "${1##[-+]}" ]; do
	case $1 in
		-\?|-h|--h|--help)
			show_help
			;;
		--help-all)
			show_help all
			;;
#		--homepath=?*)
#			HOMEPATH=${1#--homepath=}
#			shift
#			;;
		--shoutcast-all)
			INSTALLDEPS=1
			EXTRAPACKAGES="$EXTRAPACKAGES shoutcast2 liquidsoap"
			;;
		--icecast-all)
			INSTALLDEPS=1
			EXTRAPACKAGES="$EXTRAPACKAGES icecast liquidsoap"
			;;
		--shoutcast)
			EXTRAPACKAGES="$EXTRAPACKAGES shoutcast2"
			;;
		--icescc|--icecast|--sctrans|--sctrans2|--shoutcast1|--shoutcast2|--liquidsoap)
			EXTRAPACKAGES="$EXTRAPACKAGES ${1#--}"
			;;
		--deps)
			INSTALLDEPS=1
			;;
		--autodeps)
			AUTODEPS=1
			;;
		--channel=?*)
			BRANCH=${1##*=}
			;;
		--vhosts=?*)
			VHOSTPATH=${1##*=}
			;;
		--arch=?*)
			FORCEARCH=${1##*=}
			;;
		--dist=?*)
			FORCEDIST=${1##*=}
			;;
		--force)
			FORCE=1
			;;
		--admin-email=?*)
			ADMINEMAIL=${1##*=}
			;;
		--admin-pass=?*)
			ADMINPASS=${1##*=}
			;;
		--dbname=?*)
			DBNAME=${1##*=}
			;;
		--dbuser=?*)
			DBUSER=${1##*=}
			;;
		--dbpass=?*)
			DBPASS=${1##*=}
			;;
		--dbhost=?*)
			DBHOST=${1##*=}
			;;
		--dbroot=?*)
			DBROOT=${1##*=}
			;;
		--no-firewall)
			UPDATEFIREWALL=0
			;;
		--bind=?*)
			BINDADDR=${1##*=}
			;;
		--fqdn=?*)
			FQDN=${1##*=}
			;;
		--email=?*)
			LEEMAIL=${1##*=}
			;;
		--letsencrypt)
			LETSENCRYPT=1
			;;
		--webports)
			WEBPORTS=1
			;;
		--secure=?*)
			FQDN=${1##*=}
			LETSENCRYPT=1
			WEBPORTS=1
			;;
		--no-color)
			color 0
			;;
		--reinstall)
			REINSTALL=1
			;;
		--reinstalling)
			REINSTALL=0
			;;
		--no-preserve)
			REIPRESERVE=0
			;;			
		--debug)
			DEBUG=1
			;;
		--stroke-ego)
			echo "You smell nice today."
			exit 0
			;;
		*)
			;;
	esac
	shift
done

# find out who we're running as
MYUID=`id -u`
if [ $MYUID -ne 0 ]; then
	cecho "{err}This installer must be run as root.{off}"
	exit 1
fi

# are we FreeBSD? (todo: add support for other BSDs)
KERNOSTYPE=`uname -s`
if [ "$KERNOSTYPE" != "Linux" ]; then
	cecho "{err}This installer requires Linux.{off}"
	exit 1
fi

if [ $REINSTALL -gt 0 ]; then
	reinstall "$ARGS" 
	exit $?
fi

detect_os_arch
detect_systemd

[ ! -z "$FORCEARCH" ] && OSARCH="$FORCEARCH"
case "$OSARCH" in
	i686|i1586|x86_64|amd64)
		if [ ! -z "$FORCEARCH" ]; then
			SYSTEMARCH="$FORCEARCH"
		elif [ $LINUX64 -gt 0 ]; then
			SYSTEMARCH="x86_64"
		else
			SYSTEMARCH="i686"
		fi
		;;
	i[345]86)
		ccat << EOF
{err}This installer requires an i686-class processor or better ($OSARCH not supported).{off}

If you are certain that your architecture is x86 or x86-64, you can override
this check using {opt}--arch=i686{off} (for x86) or {opt}--arch=amd64{off} (for x86-64)
EOF
		exit 1
		;;
	*)
		ccat <<EOF
{err}Your machine type, $OSARCH, is not currently supported by this installer.{off}

If you are certain that your architecture is x86 or x86-64, you can override
this check using {opt}--arch=i686{off} (for x86) or {opt}--arch=amd64{off} (for x86-64)
EOF
		exit 1
		;;
esac

if [ $LETSENCRYPT -gt 0 ]; then
	if [ $WEBPORTS -eq 0 ]; then
		ccat <<EOF
{err}Let's Encrypt support requires that Centova Cast must use ports 80 and 443.{off}

Please ensure that no other web server is using ports {bold}80 or 443{off} on this
server (or use {opt}--bind=ADDRESS{off} to specify an unused IP address on this server)
and then run this installer again with the {opt}--webports{off} parameter.
EOF
		exit 1
	fi
	if [ "$FQDN" == "hostname.example.com" ]; then
		ccat <<EOF
{err}The FQDN 'hostname.example.com' is just an example.{off} 

Please run this installer again replacing {bold}hostname.example.com{off} with the
actual host/domain name that you want Centova Cast to use.
EOF
		exit 2
	fi
	if [ -z "$FQDN" ]; then
		ccat <<EOF
{err}Let's Encrypt support requires a fully-qualified domain name (FQDN) for which
your SSL/TLS certificates will be issued.{off}

Please run this installer again with the {opt}--fqdn{off} parameter to specify
the host/domain name to use.
EOF
		exit 1
	fi
fi

if [ $WEBPORTS -gt 0 ]; then
	portinuse=80
	inuseby=$(get_port_process $portinuse "$BINDADDR")
	if [ -z "$inuseby" ]; then
		portinuse=443
		inuseby=$(get_port_process $portinuse "$BINDADDR")
	fi
	
	if [ ! -z "$inuseby" ]; then
		ccat <<EOF
Port {bold}$portinuse{off} on this server is already being used by {bold}$inuseby{off}.

Only one web server may use port $portinuse on your server. Please remove or
disable $inuseby and run this installer again to proceed.

If you do not wish to remove or disable $inuseby, you will need to either
configure $inuseby to use a different IP address than Centova Cast (and use
the {opt}--bind{off} parameter to force Centova Cast to use a specific IP address), or
install Centova Cast without SSL/TLS or stream proxy support by omitting the
{opt}--secure{off} or {opt}--webports{off} parameters when running this installer.
EOF
		exit 1
	fi
fi 

if [ -e /etc/centovacast.conf ]; then
	if [ $FORCE -gt 0 ]; then
		rm -f /etc/centovacast.conf
		rm -rf $HOMEPATH
	else
		. /etc/centovacast.conf
		if [ ! -z "$HOMEPATH" -a -d "$HOMEPATH" ]; then
			ccat <<EOF

{err}/etc/centovacast.conf already exists.{off}  Has Centova Cast already been installed?
Before installing Centova Cast, any existing installation (including partial or
failed installations) should be removed by running:

    {code}$HOMEPATH/sbin/uninstall{off}

If the uninstaller fails to work, you may install with the {opt}--force{off} parameter,
although this will not stop any old Centova Cast services that may be running
and may cause problems with the new installation.
EOF
			exit 1
		fi
	fi
fi

if [ ! -z "$VHOSTPATH" ]; then
	if [ ! -d "$VHOSTPATH" ]; then
		ccat <<EOF
{err}The specified client data directory does not exist:{off}

    {code}$VHOSTPATH{off}

You must create this directory before installation if you want to use it for
client data.
EOF
		exit 1
	fi
fi

if [ $INSTALLDEPS -gt 0 ]; then

	clear
	echo ""
	echo ""
	cecho "{line}===== {title}Centova Cast Installation {line}=========================================={off}"
	echo ""

	show_status "Installing package dependencies ..."

	DIST=""
	if [ ! -z "$FORCEDIST" ]; then
		DIST="$FORCEDIST"
	elif [ -e /etc/debian_version ]; then
		DIST="debian"
	elif [ -e /etc/redhat-release ]; then
		DIST="redhat"
	fi

	if [ -e /etc/lsb-release ]; then
		LSBDISTRIB=$(grep -m1 DISTRIB_ID ./etc/lsb-release | sed 's/^.*=//')
		if [ "$LSBDISTRIB" == "Ubuntu" ]; then
			ccat <<EOF

{warn}Ubuntu Linux detected.{off}

Ubuntu is not officially supported for use with Centova Cast.  Ubuntu-specific
issues encountered in Centova Cast or related packages may not be supported by
Centova Technologies.

EOF

			for i in 1 2 3 4 5; do echo -n " ."; sleep 1; done
			echo ""
			echo ""
		fi
	fi

	DASHY=""
	[ $AUTODEPS -gt 0 ] && DASHY="-y"

	if [ "$DIST" == "debian" ]; then
		if [ -e /etc/os-release ]; then
			VERSION_ID="0.0"
			. /etc/os-release
		else
			VERSION_ID="$(cat /etc/debian_version)"
		fi
		VMAJOR=$(( ${VERSION_ID%%.*} + 0))

		PACKAGES="findutils wget tar gzip unzip sed grep rsync build-essential debianutils"
		if [ $INSTTYPE == "full" ]; then
			if [ $VMAJOR -lt 10 ]; then
				PACKAGES="mysql-server $PACKAGES"
			else
				PACKAGES="mariadb-server $PACKAGES"
			fi
		fi
		if [ $SYSTEMARCH == "x86_64" ]; then
			if [ $VMAJOR -ge 9 ]; then
				PACKAGES="libc6-i386 $PACKAGES"
				
			elif [ $VMAJOR -gt 6 ]; then
				dpkg --add-architecture i386 || error_exit "Centova Cast installer: dpkg refused to add i386 architecture (required for SHOUTcast v1), aborting"
				apt-get update || error_exit "Centova Cast installer: apt-get update failed for i386 architecture (required for SHOUTcast v1), aborting"

				PACKAGES="libc6:i386 $PACKAGES"

			else
				PACKAGES="ia32-libs $PACKAGES"
			fi
		fi
		apt-get $DASHY install $PACKAGES || error_exit "Centova Cast installer: apt-get exited with an error, aborting"

	elif [ "$DIST" == "redhat" ]; then
		VMAJOR=0
		if [ -e /etc/os-release ]; then
			VERSION_ID="0.0"
			. /etc/os-release
		else
			VERSION_ID="$(sed -r -e 's/^.*release //' -e 's/\..*$//g' /etc/redhat-release)"
		fi
		VMAJOR=$(( ${VERSION_ID:0:1} + 0))

		PACKAGES="findutils wget tar gzip unzip sed grep gawk rsync gcc gcc-c++ make which"
		if [ $INSTTYPE == "full" ]; then
			if [ $VMAJOR -lt 7 ]; then
				MYSQLPKG="mysql-server"
			else
				MYSQLPKG="mariadb-server"
			fi
			PACKAGES="$MYSQLPKG $PACKAGES"
		fi
		if [ $VMAJOR -lt 8 ]; then
			[ $SYSTEMARCH == "x86_64" ] && PACKAGES="compat-glibc $PACKAGES"
		else
			[ $SYSTEMARCH == "x86_64" ] && PACKAGES="glibc.i686 $PACKAGES"
			
			yum config-manager --set-enabled PowerTools 
			if [ $? -ne 0 ]; then
				# enabling PowerTools per above won't work if dnf-plugins-core isn't installed; in that case,
				# try to manually enable PowerTools
				if [ -e /etc/yum.repos.d/CentOS-Linux-PowerTools.repo ]; then
					sed -i 's/^enabled=0/enabled=1/' /etc/yum.repos.d/CentOS-Linux-PowerTools.repo
				else
					error_exit "Centova Cast installer: yum exited with an error while enabling PowerTools, aborting"
				fi
			fi
		fi
		yum $DASHY install $PACKAGES || error_exit "Centova Cast installer: yum exited with an error, aborting"

		MYSQLTYPE="${MYSQLPKG%%-*}"
		[ "$MYSQLTYPE" == "mysql" ] && MYSQLTYPE=mysqld

		if [ $INSTTYPE == "full" ]; then
			if [ $SYSTEMD -gt 0 ]; then
				systemctl enable $MYSQLTYPE
				systemctl start $MYSQLTYPE
			else
				chkconfig --add $MYSQLTYPE
				service start $MYSQLTYPE
			fi
		fi

	else
		ccat <<EOF
{err}Unable to install package dependencies{off}; cannot identify system as Red Hat or
Debian based.

If you know your OS is based on Red Hat or Debian Linux, you can override this
check by passing {opt}--dist=redhat{off} (for Red Hat derivatives) or {opt}--dist=debian{off} (for
Debian Linux derivatives).
EOF
		exit 1
	fi
fi

clear
echo ""
echo ""
cecho "{line}===== {title}Centova Cast Installation {line}=========================================={off}"
echo ""

show_status "Downloading installation system ..."

UPDATETMP=$HOMEPATH/var/tmp/update
[ ! -d $UPDATETMP ] && mkdir -p $UPDATETMP

get_file $UPDATEURL/$BRANCH/$LICENSE_KEY/$SYSTEMARCH/$FILENAME $UPDATETMP/$FILENAME
[ $? -gt 0 ] && error_exit "Error downloading archive"
[ ! -f $UPDATETMP/$FILENAME ] && error_exit "Archive could not be saved"

HASHFILE=$UPDATETMP/${FILENAME}.md5
get_file ${UPDATEURL}/$BRANCH/$LICENSE_KEY/$SYSTEMARCH/$FILENAME.md5 $HASHFILE
[ $? -gt 0 ] && error_exit "Error downloading verification hash"
[ ! -f $HASHFILE ] && error_exit "Verification hash could not be saved"

echo "Verifying archive integrity ..."
cd $UPDATETMP
md5sum $HASHFILE >/dev/null 2>&1
[ $? -gt 0 ] && error_exit "Error: archive is incomplete or has been tampered with"
echo "Unpacking archive ..."

tar xzf $FILENAME
[ ! -d $DATADIR ] && error_exit "Error: upacked archive does not contain data files"
[ ! -f install.sh ] && error_exit "Error: unpacked archive does not contain installer"

echo ""
cecho "{bold}Beginning installation ...{off}"

echo "HOMEPATH=$HOMEPATH" > /etc/centovacast.conf

chmod 0755 ./install.sh
#echo "[packages/install.install.sh] Invoking: ./install.sh '$INSTTYPE' '$LICENSE_KEY' '$UPDATEURL' '$BRANCH' $ARGS"
[ $DEBUG -gt 0 ] && echo "Dispatch install.sh '$INSTTYPE' '$LICENSE_KEY' '$UPDATEURL' '$BRANCH' $ARGS"
./install.sh "$INSTTYPE" "$LICENSE_KEY" "$UPDATEURL" "$BRANCH" $ARGS
if [ $? -ne 0 ]; then 
	echo "Installer exited with error, aborting"
	exit 1
fi

cd /
failures=()
if [ ! -z "$EXTRAPACKAGES" ]; then
	echo ""
	echo ""
	cecho "{line}===== {title}Supplementary Software Installation {line}================================{off}"
	echo ""
	declare -A donepackages=( )
	for f in $EXTRAPACKAGES; do
		[ -z "${donepackages[$f]}" ] || continue
		donepackages[$f]=1
		 
		show_status "Adding $f ..."
		$HOMEPATH/sbin/update --add $f
		if [ $? -gt 0 ]; then
			failures+=( "{dkerr}-{off} {bold}$f{off} did not install successfully and will NOT be available for use.\n  To try again, run:\n  {code}$HOMEPATH/sbin/update --add $f{off}" )
		fi
	done
fi

rm -rf $UPDATETMP


[ $WEBPORTS -gt 0 ] && enable_web_ports "$BINDADDR" "$FQDN" "$LETSENCRYPT" "$LEEMAIL" 

if [ "$INSTTYPE" == "full" ]; then
	detect_web_ip

	WEBINSTALLED=0
	if [ "$ADMINEMAIL" != "" ]; then
		automate_web_install
		if [ $? -eq 0 ]; then
			WEBINSTALLED=1
		else
			failures+=( "{dkerr}-{off} Failed to perform automated web installation. To try again manually, launch\n  the web interface." )
		fi
	fi
fi


ccat <<EOF


{line}===== {title}Installation Complete {line}=============================================={off}

EOF

show_firewall_tip "$INSTTYPE" "$WEBIP"

cecho "{hdg}Accessing the Web Interface{off}"
echo ""

if [ "$INSTTYPE" == "full" ]; then
	if [ $WEBINSTALLED -gt 0 ]; then
		cecho "  {bold}The web interface may now be launched at:{off}"
	else
		cecho "  {bold}To complete your installation, please launch the web interface at:{off}"
	fi

	cchost="$FQDN"
	[ -z "$cchost" ] && cchost="$WEBIP"

	if [ $LETSENCRYPT -gt 0 ]; then
		cecho "    {code}https://${cchost}/{off}"
		
	elif [ $WEBPORTS -gt 0 ]; then 
		cecho "    {code}http://${cchost}/{off}"
		
	else
		cecho "    {code}http://${cchost}:2199/{off} {gray}(insecure){off}"
		cecho "    {code}https://${cchost}:2199/{off} {gray}(secure){off}"
	fi

elif [ "$INSTTYPE" == "bare" ]; then
	cecho "  {bold}The basic installation system has now been installed.{off}  To add further"
	echo  "  packages run:"
	cecho "    {code}/usr/local/centovacast/sbin/update --add <packagename>{off}"

else
	cecho "  {bold}This server has been added to your Centova Cast control panel.{off}  To begin"
	echo "  provisioning accounts to this server, please log in to your control panel"
	echo "  now."
fi
echo ""

if [ ${#failures[@]} -gt 0 ]; then
	(
		echo "{err}Post-installation Errors{off}"
		echo ""
		echo "Note - the following problems occurred during post-installation:"
		for f in "${failures[@]}"; do
			echo ""
			echo -e "$f"
		done
	) | ccat -p "{dkerr}| {off}"
	echo "" 
fi

echo "Thank you for using Centova Cast."
